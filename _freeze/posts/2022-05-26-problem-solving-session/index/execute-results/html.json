{
  "hash": "e877f6eb9f41719871538022f8f45677",
  "result": {
    "markdown": "---\ntitle: Problem Solving Session I\nauthor: ''\ndate: '2022-05-26'\nslug: []\ncategories: []\ntags:\n  - raster\n  - terra\n  - r\nTags: []\noutput:\n  blogdown::html_page:\n    toc: true\nCategories: []\nDisableComments: no\n---\n\n\n\n## About the session\n\nWe did something different for May: a problem solving session! \n\n![](https://c.tenor.com/Ay19-AbBCfIAAAAC/hangover-math.gif)\n\n\nHere, people emailed in some questions which we went through and discussed in the workshop. \n\nIt seemed to go pretty well, so we will probably use this format from time to time. \n\nBelow, we have the two main questions that were discussed, attempted solutions  \n\n## Question 1 - Rasterizing field size information per farm. \n\n### The question.\n\nI have a geospatial problem to crop field mapping.I am using household survey data that includes a section on crop fields, their location, their area, use, distance to homestead and other things. An example for one country, Ethiopia, is [here](https://microdata.worldbank.org/index.php/catalog/3823/data-dictionary/F68?file_name=ETH_PlotGeovariables_Y4.dta).\n\nFor privacy reasons I cannot get the GPS coordinates of each crop field although this data was collected. The household GPS locations are easier to access.\n \nI try to think through a process of calculating field size per raster grid cell that intersects with a circle around a household that is defined by the maximum field-homestead distance. I know that all the fields have to be within that circle and I know the mean field size and the distribution of field sizes within that circle. I was thinking to just assume that every grid cell in the circle has the mean field size of that circle with an error range based on the field size distribution. But there are also overlaps between circles and I donâ€™t just want to calculate averages in this case. \n \nDo you know of a similar geospatial problem that someone has solved already that I could look into to get some ideas? From another field outside agriculture even?\n\n![](images/katharina.png)\n\n\n### Create some dummy data \n\nIn this problem, we have point data (the households), with attributes related to the crop fields that are associated with that household, such as their area, use and distance to homestead. One of those attributes, maximum distance of field to homestead, was used to generate the buffers (red circles). But because maximum distance doesn't perfectly capture the distance of fields to homesteads, they overlap.\nThis complicates the process of rasterising the buffers. \n\n\nTo explore our options, we will use the Terra R package. \n\nFirst, we will create some dummy data.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.18\n```\n:::\n\n```{.r .cell-code}\nr <- rast(ncols=10, nrows=10, xmin = 1, xmax = 1.1, ymin = 1, ymax = 1.1)\nvalues(r) <- sample(1:ncell(r), ncell(r))\n```\n:::\n\n\nThen create some random points within our dummy raster (r). These represent the household locations. \n\n::: {.cell}\n\n```{.r .cell-code}\nsamp <- spatSample(r, 25, as.points=TRUE, method = \"random\")\nwidths <- sample(100:1000, length(samp), replace = T)\n```\n:::\n\n\nFinally, we will add buffers to each of the points, randomly sized to represent the variability in maximum distance to field from household. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuf<-list()\nfor(i in 1:length(samp)) {buf[[i]] <- buffer(samp[i], widths[i])}\nfields <- vect(buf)\n```\n:::\n\n\nAlso, add in other attributes (dmax, dmin and dmed) representing other field attributes like mean field size etc. \n\n::: {.cell}\n\n```{.r .cell-code}\nfields$ID <- 1:25 #field IDs\nfields$dmax <- expanse(fields) / 1000 #based on area covered by vector. \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: [expanse] unknown CRS. Results can be wrong\n```\n:::\n\n```{.r .cell-code}\nfields$dmin <- fields$dmax / 4 \nfields$dmed <- fields$dmax / 2 \n```\n:::\n\n\nSo now when we plot everything, we have essentially recreated the problem. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(r) #plot the dummy raster\nplot(fields, add = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAnd when we look at the attributes of the fields dataset, we have attributes for each field. \n\n::: {.cell}\n\n```{.r .cell-code}\nfields\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n class       : SpatVector \n geometry    : polygons \n dimensions  : 25, 5  (geometries, attributes)\n extent      : 0.9961141, 1.096878, 0.9973581, 1.102877  (xmin, xmax, ymin, ymax)\n coord. ref. :  \n names       : lyr.1    ID      dmax      dmin      dmed\n type        : <int> <int>     <num>     <num>     <num>\n values      :     5     1 1.071e-07 2.677e-08 5.354e-08\n                 100     2 6.054e-08 1.514e-08 3.027e-08\n                  23     3 1.221e-07 3.052e-08 6.104e-08\n```\n:::\n:::\n\n\n### Method 1. go back to point data, and add rasterise points using the grid. \n\nThis ensures that polygons are not overlapping - 1 point per grid cell. but it removes the spatial \nrepresentation of the radius.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentres <- terra::centroids(fields)\nplot(r)\nplot(centres, add=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNow that we have converted the buffers to points, we can use the `rasterize` function to add the point data to the rasters - one \nlayer per attribute. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndmax_cent <- rasterize(centres, r, \"dmax\", \"mean\") #rasterize the dmax attribute of the points\nnames(dmax_cent) <- \"dmax_cent\" #name the dmax layer\n\ndmin_cent <- rasterize(centres, r, \"dmed\", \"mean\") # rasterize the median field size attribute from the points\nnames(dmin_cent) <- \"dmin_cent\" #name the dmin layer\n\ndmed_cent <- rasterize(centres, r, \"dmin\", \"mean\") #rasterize the min field size from the point layers\nnames(dmed_cent) <- \"dmed_cent\" #name the dmed layer\n\ncent_combined <- c(dmax_cent, dmin_cent, dmed_cent) #combine the rasters into a single spatVector\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,3))\n\nplot(dmin_cent, xlim = c(1, 1.1))\nplot(centres, add=T)\n\nplot(dmax_cent)\nplot(centres, add=T)\n\nplot(dmax_cent)\nplot(centres, add=T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can see that each household, represented by the points, relates to a single raster grid cell. This might be enough, but the spatial information embedded in the buffers - where the buffer size is proportional to maximum distance - is lost. \n\nSo what options are there to preserve this information when rasterizing? \n\n\n### Method 2. add values of buffer to grid cell, and account for the proportion of overlap. \n\nThere has been a [similar issue posted on stackoverflow](https://stackoverflow.com/questions/71065269/rasterize-polygons-based-on-maximum-overlap-using-r-packages-terra-or-stars) which gives us some clues.\n\nOk, going back to our fields and our raster: \n\n::: {.cell}\n\n```{.r .cell-code}\nplot(r)\nplot(fields, add=T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nOne idea was to scale the field size by the fraction of the grid cell that it covers, such that a 100m max field size, that \ncovered 5% of a grid would become 5m. Unfortunately this doesn't make a lot of sense, as the actual size of the field hasnt changed. \n\nSo really what we want to do is just add the field size onto the raster. so even if its a small fraction, the average size would still be 100m. \n\nBut its not so simple when field buffers overlap: what happens when a 100m field and 50m field overlap within the same grid cell? \n\nOne approach is to reduce the cell size of the original raster, then individually rasterize all of the field polygons using this fine resolution raster, before merging the musing the `mosaic` function to make the grid cells much smaller than they currently are. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndis <- terra::disagg(r, 20) # 20x smaller cells. \ndvalue <- lapply(1:nrow(fields), \\(i) rasterize(fields[i,], dis, field = \"dmax\")) #rasterize each of the fields using the fine raster  \ndvalue <- terra::sprc(dvalue) #make a spatraster collection out of the list of rasterised fields \ndvalue <- mosaic(dvalue) #mosaic them all together, which by default will average overlapping cells\nplot(dvalue)\nplot(fields, add=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nNow, the original question was what is the average field size per grid cell. When we re-aggregate the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\n\nplot(dmax_cent)\nplot(fields, add=T)\n\nplot(aggregate(dvalue, 20, mean, na.rm = TRUE))\nplot(fields, add=T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nSo now, each cell *should* represent the average field size within it. \nThis is not perfect: It might tell you where there are trends toward bigger or smaller fields, but the raster cell is not proportional to \nfield size so be careful with summary statistics. \n\n## Question 2. Take a sample of a continuous raster using a random sample of a categorical raster. \n\n### The problem\nHave 2 rasters, one categorical representing classes of coral reef cover, and one continuous representing wave action. \n\nWanting to take a random sample of the reef cover raster (excluding NAs), then use that sample to return corresponding values of the continuous raster. The two rasters have different resolutions. \n \n### Attempted solution\n\nAs always, we will start by trying to create a dummy dataset. \nStarting with the reef cover raster. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra) #load the terra library, the best for raster analysis in R \n\n#make a coral cover raster\ncoral <- rast(ncol=10, nrow=10, names=\"stratum\")  # a 10x10 raster\nset.seed(1)\nvalues(coral) <- round(runif(ncell(coral), 1, 5)) #values 1-5, setting 5 as NA\ncoral <- terra::classify(coral, cbind(5, NA)) # #make 5 NA, so the dataset has some NA\n\n#make a wave action raster\nwave <- rast(ncol=20, nrow=20) \nset.seed(1)\nvalues(wave) <- runif(ncell(wave), 1, 25)\nwave <- terra::classify(wave, cbind(5, NA))\n\npar(mfrow=c(1,2)) #plot them side-by-side\nplot(coral)\nplot(wave)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nNow we can take a random sample of the coral cover raster using the `spatSample` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_pts <- spatSample(coral, 10, \"random\", as.points=TRUE, na.rm = TRUE) #this will sample the number from among the strata (not #NA) \nplot(coral)\nplot(rand_pts, 1, add=TRUE, plg=list(x=185, y=1, title=\"points\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\nAnd we can see that each point relates to the stratum integer of the raster: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_pts$stratum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3 3 3 4 1 4 4 3 3 4\n```\n:::\n:::\n\n\nAs an aside, this doesn't seem to work when we have a *named* categorical raster, as opposed to a categorical raster represented by integers. \nAs we will see if we label the categories using the `levels` function:\n\n::: {.cell}\n\n```{.r .cell-code}\ncoral_named = coral-1 #values need to start at zero, not one, for the levels function. \n#the way we made the raster, they started at one. \n\nlevels(coral_named) <- c(\"Rubble\", \"Coral/Algae\", \"Sand\", \"Rock\") #now we Can add our category labels in \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: [set.cats] setting categories like this is deprecated; use a two-column\ndata.frame instead\n```\n:::\n\n```{.r .cell-code}\nplot(coral_named)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\nWe would obviously prefer our categorical raster to look like this, with names rather then integers representing the categories. But when we randomly sample it with `spatSample` (using the exact same code as above), we get a whole pile of NAs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_pts_named <- spatSample(coral_named, 10, \"random\", as.points=TRUE, na.rm = TRUE) #this will sample the number from among the strata (not NA) \nrand_pts_named$stratum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Coral/Algae Rock        Rock        Sand        Rock        Coral/Algae\n [7] Rock        Sand        Sand        Rubble     \nLevels: Rubble Coral/Algae Sand Rock\n```\n:::\n:::\n\nNot sure why this is the case and it might be a good one to put on stack overflow... but for now, lets just move on knowing the integers represent the cover classes. \n\nSo getting back to the task - we can use the  random sample from the `coral` layer stored in the `rand_pts` `spatVector` using \n`rasterize`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoral_sample <- rasterize(rand_pts, wave, field = \"stratum\") #rasterize the points using the wave raster as a template\n```\n:::\n\n\nAnd now that we are done sampling, we can name our coral categories. \n\n::: {.cell}\n\n```{.r .cell-code}\ncoral_sample <- coral_sample -1\nlevels(coral_sample) <- c(\"Rubble\", \"Coral/Algae\", \"Sand\", \"Rock\") #now we can add our category labels in\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: [set.cats] setting categories like this is deprecated; use a two-column\ndata.frame instead\n```\n:::\n:::\n\n\nFinally, we can use the mask function to grab the cells where we have sample values of coral:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaves_sample <- mask(wave, coral_sample) #get the waves cells where the points were \n```\n:::\n\n\nLets have a look at the two rasters to see if they it all makes sense. \n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2)) #plot them side-by-side\nplot(coral_sample)\nplot(waves_sample)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}